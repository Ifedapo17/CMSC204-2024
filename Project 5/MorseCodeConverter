import java.io.*;
import java.util.*;


public class MorseCodeConverter {
	public static MorseCodeTree morseCode_tree = new MorseCodeTree();
	
	public MorseCodeConverter() {
		
	}
	
	/**
	 * returns a string with all the data in the tree in LNR order with an space in between them. Uses the
	 * toArrayList method in MorseCodeTree It should return the data in this
	 * order:"h s v i f u e l r a p w j b d x n c k y t z g q m o" Note the extra space between j and b - that is
	 * because there is an empty string that is the root, and in the LNR traversal, the root would come between
	 * the right most child of the left tree (j) and the left most child of the right tree (b). This is used for
	 * testing purposes to make sure the MorseCodeTree has been built properly
	 * @return the data in the tree in LNR order separated by a space.
	 */
	public static String printTree() {
		String treeString = "";
		int count = 0;
		
		for(String i : morseCode_tree.toArrayList()) {
			if(count == morseCode_tree.toArrayList().size() - 1) {
				treeString += i;
			}else {
				treeString += i + " ";
			}
			count++;
			
		}
		
		return treeString;
	}
	
	/**
	 * Converts Morse code into English. Each letter is delimited by a space (‘ ‘). Each word is delimited by
	 * a ‘/’.
	 * @param code - the morse code
	 * @return the English translation
	 */
	public static String convertToEnglish(String code) {
		String sentence = "";
		String[] words = code.split("/");
		int count = 0;
		
		for(String i : words) {
			String[] letters = i.split(" ");
			
			for(String x: letters) {
				sentence += morseCode_tree.fetch(x);
				
//				if(!(x.equals("") || !x.equals(" ") || !(x == null))) {
//					sentence += morseCode_tree.fetch(x);
//				}
			}
			if (count != words.length - 1) {
				sentence += " ";
			}
			
			count++;
		}
		
		return sentence ;
	}
	
	/**
	 * Converts a file of Morse code into English Each letter is delimited by a space (‘ ‘). Each word is
	 * delimited by a ‘/’.
	 * @param codeFile - name of the File that contains Morse Code
	 * @return the English translation of the file
	 * @throws FileNotFoundException
	 */
	public static String convertToEnglish(File codeFile) throws FileNotFoundException{
		Scanner scan = new Scanner(codeFile);
		String sentence = "";
		
		while(scan.hasNextLine()) {
			sentence += scan.nextLine();
		}
		
		scan.close();
		
		return convertToEnglish(sentence.trim());
	}
}
